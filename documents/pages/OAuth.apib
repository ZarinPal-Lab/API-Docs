
# Group OAuth

## postAccessToken [/oauth/accessToken.json]

issue access token

### Post AccessToken [POST]

+ Request (application/json)

    + Headers
    grant_type : {grant_type},
    client_id : {client_id},
    client_secret : {client_secret},
    username : {email} or {mobile},
    password : {password},
    scope : {scope},
    is_web_app : true or false

+ Response 400 (application/json)

  + Body
    {
        "meta": {
        "code": 400,
        "error_type": "OauthInvalidCredentials",
        "error_message": "The user credentials were incorrect."
        }
    }

+ Response 200 (application/json)

  + Body
    {
      "data":
          {
            "access_token": "kw2LLkiTsZ6fBx9KRalUrCd",
            "token_type": "####",
            "expires_in": ######,
            "refresh_token": "qma6tBnZF776Q46o88FWZr"
          }
    }

    + Schema
      {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "token_type": {
            "type": "integer"
          },
          "expires_in": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        }

## post otpToken [/oauth/otpToken]

post otpToken getInfo

### Post otpToken [POST]

+ Request (application/json)

  + Body
    {
      "email" : "test@gmail.com"
    }

+ Response 400 (application/json)

  + Body
    {
        "meta": {
        "code": 400,
        "error_type": "OauthAccessDenied",
        "error_message": "The resource owner or authorization server denied the request."
        }
    }

+ Response 200 (application/json)

  + Body
    {
      "meta": {
        "code": 200,
        "message": "Wait until hour : 15:32:33"
        }
    }

+ Response 200 (application/json)

  + Body
    {
      "meta": {
        "code": 200,
        "message": "sms sent, Wait until hour : 15:32:33"
        }
    }

## logout [/oauth/logout.json]

logout user in app

### logout [GET]

+ Request (application/json)

    + Headers
    Authorization : {access_token}

+ Response 400 (application/json)

  + Body
    {
        "meta": {
        "code": 400,
        "error_type": "InvalidCredentials",
        "error_message": "The user credentials were incorrect."
        }
    }

+ Response 200 (application/json)

  + Body
    {
      "meta": {
        "code": 200,
        "message": "Session Expired Successfully."
        }
    }

## register [/oauth/register.json]

register new user

### Post Register [POST]

+ Request (application/json)

    + Body
      {
          "first_name":"masoud",
          "last_name":"lotfi",
          "email":"test@gmail.com",
          "mobile":"09351309626",
          "password":"#######"
      }

    + Schema
      {
          "type" : "object",
          "properties" : {
              "first_name" : {
                "type" : "string"
              },
              "last_name" : {
                "type" : "string"
              },
              "email": {
                "type" : "string"
              },
              "mobile": {
                "type" : "string"
              },
              "password": {
                "type" : "string"
              }
          }
      }

+ Response 200 (application/json)

    + Body
    {
      "meta": {
        "code": 200,
        "message": "you are registered, now verify your email address."
        }
    }

## Resend Mobile verification [/oauth/resendMobileVerifyCode.json]

Resend Mobile Verify Code

### Post Resend Mobile Verify Code [POST]

+ Request (application/json)

    + Body
      {
          "username" : "test@gmail.com"
      }

    + Schema
      {
          "type" : "object",
          "properties" : {
              "username" : {
                "type" : "string"
              }
          }
      }

+ Response 400 (application/json)

  + Body
    {
        "meta": {
        "code": 400,
        "error_type": "OauthInvalidCredentials",
        "error_message": "The user credentials were incorrect."
        }
    }

  + Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "OauthUserMobileVerifiedBefore",
          "error_message": "this user's mobile verified before."
          }
      }

+ Response 200 (application/json)

    + Body
    {
      "meta": {
        "code": 200,
        "message": "we sent new verification code, wait 15min before trying again.",
        "verification_wait_time": 15
        }
    }

## Verify Mobile [/oauth/mobileVerification.json]

Verify user mobile

### Verify Mobile [POST]

+ Request (application/json)

    + Body
      {
          "username" : "test@gmail.com",
          "code":"######"
      }

    + Schema
      {
          "type" : "object",
          "properties" : {
              "username" : {
                "type" : "string"
              },
              "code" : {
                "type" : "string"
              }
          }
      }

+ Response 400 (application/json)

  + Body
    {
        "meta": {
        "code": 400,
        "error_type": "TokenNotFound",
        "error_message": "Token not found."
        }
    }

  + Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "TokenMismatch",
          "error_message": "Token mismatch."
          }
      }

+ Response 400 (application/json)

  + Body
    {
        "meta": {
        "code": 400,
        "error_type": "VerifiedBeforeCellphone",
        "error_message": "Mobile require validate."
        }
    }

+ Response 200 (application/json)

    + Body
    {
      "meta": {
        "code": 200,
        "message": "you mobile number verified."
        }
    }
