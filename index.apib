FORMAT: 1A
HOST: https://api.zarinpal.com/rest/v3

# ZarinPal Rest API

The ZarinPal API is organized around REST. Our API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients.

# Group Cards

## card list [/card/list.json]

Show all user's card

### List All Cards [GET]

+ Request (application/json)

    + Headers
    Authorization : access_token

+ Response 400 (application/json)

  + Body
    {
        "meta": {
        "code": 400,
        "error_type": "CardNotFound",
        "error_message": "The selected card not found or you are not allowed to use it."
        }
    }

+ Response 200 (application/json)

  + Body
    {
      "data": [
          {
            "entity_id": "5767cba0211677b008",
            "account_id": 2455866200123,
            "iban": "IR140620000002101234567898",
            "pan": "636214******5863",
            "is_legal": false,
            "status": "Active",
            "issuer": {
              "name": "زرين کارت",
              "slug": "ZarinCard"
            },
            "expired_at": "2019-06-30 19:30:11"
          }
        ]
    }

    + Schema
      {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "entity_id": {
              "type": "string"
            },
            "account_id": {
              "type": "integer",
              "description": "account number"
            },
            "iban": {
              "type": "string"
            },
            "pan": {
              "type": "string"
            },
            "is_legal": {
              "type": "boolean",
              "description": "if is_legal set to ture this card is legal else it's real"
            },
            "issuer": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                }
              }
            },
            "expired_at": {
              "type": "string",
              "description": "expiration date for this card"
            }
          }
        }
      }


## card show [/card/show/{{card_entity_id}}.json]

Show one user's card

### Show One Card [GET]

+ Request (application/json)

    + Headers
    Authorization : access_token

+ Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "CardNotFound",
          "error_message": "The selected card not found or you are not allowed to use it."
          }
      }

+ Response 200 (application/json)

  + Body
     {
      "data": {
          "entity_id": "5767cba02128e8bf1677b008",
          "account_id": 2100455866200,
          "iban": "IR140620000002100455866200",
          "pan": "636214******5863",
          "is_legal": false,
          "status": "Active",
          "issuer": {
            "name": "زرين کارت",
            "slug": "ZarinCard"
          },
          "expired_at": "2019-06-30 19:30:00"
          },
          "meta": {
            "code": 200
          }
      }

  + Schema
  {
    "type": "object",
    "properties": {
      "entity_id": {
        "type": "string"
      },
      "account_id": {
        "type": "integer",
        "description": "account number"
      },
      "iban": {
        "type": "string"
      },
      "pan": {
        "type": "string"
      },
      "is_legal": {
        "type": "boolean",
        "description": "if is_legal set to ture this card is legal else it's real"
      },
      "status": {
        "type": "string"
      },
      "issuer": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        }
      },
      "expired_at": {
        "type": "string",
        "description": "expiration date for this card"
      }
    }
    }

## card add [/card/add.json]

add user's card

### Add One Card [POST]

+ Request (application/json)

    + Headers
    Authorization : access_token
    + Body
        {
          "iban" : "IR150570028080012345531301",
          "pan" : "5022291012345190",
          "isLegal" : 1,
          "expired_at" : "1399-5"
        }

    + Schema
      {
        "type": "object",
        "properties": {
          "iban": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          },
          "is_legal": {
            "type": "integer",
            "description": "if is_legal set to 1 this card is legal and if is_legal set to 0  it's real"
          },
          "expired_at": {
            "type": "string",
            "description": "expiration date for this card"
          }
        }
     }

+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardExists",
            "error_message": "The card already exists."
          }
      }
+ Response 400 (application/json)
    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardNotSupported",
            "error_message": "The card issuer is not supported."
          }
      }
+ Response 400 (application/json)
    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardExpired",
            "error_message": "The card is expired."
          }
      }

+ Response 200 (application/json)

    + Body
    {
      "meta": {
        "code": 200,
        "message": "Add card successfully."
        }
    }
## card edit [/card/edit/{{card_entity_id}}.json]

edit user's card

### Edit One Card [POST]

+ Request (application/json)

  + Headers
  Authorization : access_token
  + Body
      {
        "pan" : "6362142100133635",
        "expired_at" : "1395-5"
      }

  + Schema
    {
      "type": "object",
      "properties": {
        "pan": {
          "type": "string"
        },
        "expired_at": {
          "type": "string",
          "description": "expiration date for this card"
        }
      }
  }

+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardCanNotEdit",
            "error_message": "You can not edit this card."
          }
      }
+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardExists",
            "error_message": "The card already exists."
          }
      }
+ Response 400 (application/json)
    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardNotSupported",
            "error_message": "The card issuer is not supported."
          }
      }
+ Response 400 (application/json)
    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardExpired",
            "error_message": "The card is expired."
          }
      }

+ Response 200 (application/json)

  + Body
    {
      "meta": {
        "code": 200,
        "message": "This card updated successfully."
        }
    }

# Group Purses

## purse add [/purse/add.json]

Add one user's purse

### Add Purse [POST]

+ Request (application/json)

    + Headers
    Authorization : access_token

    + Body
    {
      "purse" : "1",
      "name" : "test1"
    }

    + Schema
    {
        "type": "object",
        "properties": {
          "purse": {
            "type": "string",
            "description": "selected purse for cost create new purse"
            },
            "name": {
              "type": "string",
              "description": "name for new purse"
        }
      }
    }

+ Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "PurseLimit",
          "error_message": "You can not create more purses."
          }
      }

+ Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "PurseNotEnoughCredit",
          "error_message": "Purse does not have enough credit."
          }
      }

+ Response 200 (application/json)

  + Body
    {
      "meta": {
        "code": 200,
        "message": "purse added successfully"
      }
    }

## list purse [/purse/list.json]

List purse current user

### List All Purses [GET]

+ Request (application/json)

    + Headers
    Authorization : access_token

+ Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "PurseNotFound",
          "error_message": "Purse Not Found."
          }
      }

+ Response 200 (application/json)

  + Body
  {
      "data":[
      {
          "purse": 1,
          "name": "اصلی زرين پال",
          "balance": 846200,
          "updated_at": "2016-05-23 09:58:18",
          "meta": {
          "code": 200
          }
        }
      ]
  }

  + Schema
  {
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "purse": {
          "type": "integer",
          "description": "purse's nember"
        },
        "name": {
          "type": "string",
          "description": "purse's name"
        },
        "balance": {
          "type": "integer",
          "description": "purse's balance"
        },
        "updated_at": {
          "type": "string",
          "description": "update date for this purse"
        }
      }
    }
  }

## purse balance [/purse/balance/purse_number.json]

get user's purse balance

### Purse Balance [GET]

+ Request (application/json)

    + Headers
    Authorization : access_token

+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "PurseNotFound",
            "error_message": "Purse Not Found."
          }
      }

+ Response 200 (application/json)

  + Body
    {
       "data": {
           "balance": 846200,
           "today_income": 0,
           "today_outcome": 0
       },
       "meta": {
         "code": 200,
       },
    }

   + Schema
   {
       "type" : "object",
       "properties" : {
         "balance" : {
           "type" : "integer",
           "description" : "purse's balance"
         },
         "today_income" : {
           "type" : "integer",
           "description" : "purse's income in today"
         },
         "today_outcome" : {
           "type" : "integer",
           "description" : "purse's outcome in today"
         }
      }
   }

## purse info [/purse/info/{{:zp.0.0}} or {{email}} or {{mobile}}.json]

Show info purse current user

### Get Info Purse [GET]

+ Request (application/json)

    + Headers
    Authorization : access_token

+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "UserNotFound",
            "error_message": "User Not Found."
          }
      }
+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "PurseNotFound",
            "error_message": "Purse Not Found."
          }
      }

+ Response 200 (application/json)

  + Body
    {
        data : {
        "purse": 1,
        "public_id": 0,
        "name": "مصطفی امیری",
        "email_hash": "asdfghjklzxcvbnmoiuytrewas",
        "zp_id": "ZP.0.0"
        },
        "meta": {
            "code": 200
        },
    }

    + Schema
    {
      "type" : "object",
      "properties" : {
        "purse" : {
          "type" : "integer",
          "description" : "purse's number"
        },
        "public_id" : {
          "type" : "integer",
          "description" : "user's public id"
        },
        "name" : {
          "type" : "string",
          "description" : "user's name"
        },
        "email_hash" : {
          "type" : "string",
          "description" : "user's email hash"
        },
        "zp_id" : {
          "type" : "string",
          "description" : "user's zp"
        }
      }
  }


## edit purse [/purse/edit/{{purse_number}}.json]

Edit name purse

### Edit Purse [POST]

+ Request (application/json)

    + Headers
    Authorization : access_token

    +Body
      {
        "name" : "test2"
      }

    + Schema
      {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "purse's name"
          }
        }
    }

+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "PurseNotFound",
            "error_message": "Purse Not Found."
          }
      }

+ Response 200 (application/json)

  + Body
    {
      "meta": {
          "code": 200,
          "message": "Update name purse successfully."
      }
    }

# Group Webservices

## list webservices [/webservice/index.json]

Get list of current users Webservice

### List All Webservices [GET]

+ Request (application/json)

    + Headers
    Authorization: access_token

+ Response 400 (application/json)

  + Body
    {
        "meta": {
          "code": 400,
          "error_type": "WebserviceNotFound",
          "error_message": "Webservice Not Found."
        }
    }

+ Response 200 (application/json)

  + Body
  {
      "data":
        {
          "entity_id": "4a0b7ff2-67ac-11e6-b8c295eb8fc",
          "status": true,
          "purse": 1,
          "category_id": 10,
          "tel": "09122182569",
          "domain": "htpp://www.test.com",
          "ip": null,
          "name": "test",
          "description": "description for test",
          "ussd_id": null,
          "zaringate_status": "NotActivated",
          "logo": "//logoland.zarinpal.com/6e76cc60647c3d288631bf3ed444dd2b/125x125.png"
        },
        "meta": {
          "code": 200
        }
  }

  + Schema
  {
    "type" : "array",
    "items" : {
        "type" : "object",
        "properties" : {
            "entity_id" : {
                "type" : "string"
            },
            "status" : {
                "type" : "boolean",
                "description" : "if set status true this webservice is active else it's not Active",
            },
            "purse" : {
                "type" : "integer"
            },
            "category_id" : {
                "type" : "integer"
            },
            "tel" : {
                "type" : "string"
            },
            "domain" : {
                "type" : "string"
            },
            "ip" : {
                "type" : "string",
                "description" : "if set ip is null ,this webservice not limited else it's on limited",
            },
            "tel" : {
                "type" : "string"
            },
            "tel" : {
                "type" : "string"
            },
            "tel" : {
                "type" : "string"
            },
            "tel" : {
                "type" : "string"
            },
            "tel" : {
                "type" : "string"
            },
        }
    }
  }

## purse add [/purse/add.json]

Add one user's purse

### Add Purse [POST]

+ Request (application/json)

    + Headers
    Authorization: access_token

    + body
    {
      "purse" : "1",
      "name" : "test1"
    }

+ Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "PurseLimit",
          "error_message": "You can not create more purses."
          }
      }
+ Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "PurseNotEnoughCredit",
          "error_message": "Purse does not have enough credit."
          }
      }

+ Response 200 (application/json)

  + Body
    {
      "meta": {
        "code": 200,
        "message": "purse added successfully"
      }
    }

## list purse [/purse/list.json]

List purse current user

### List All Purses [GET]

+ Request (application/json)

    + Headers
    Authorization: access_token

+ Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "PurseNotFound",
          "error_message": "Purse Not Found."
          }
      }

+ Response 200 (application/json)

  + body
  {
      "data":
        {
          "purse": 1,
          "name": "اصلی زرين پال",
          "balance": 846200,
          "updated_at": "2016-05-23 09:58:18"
        },
        "meta": {
          "code": 200
        }
  }

## purse balance [/purse/balance/purse_number.json]

get user's purse balance

### Purse Balance [GET]

+ Request (application/json)

    + Headers
    Authorization: access_token

+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "PurseNotFound",
            "error_message": "Purse Not Found."
          }
      }
+ Response 200 (application/json)

  + Body
        "meta": {
          "code": 200,
          },
       "data": {
           "balance": 846200,
           "today_income": 0,
           "today_outcome": 0
       }

## purse info [/purse/info/:zp.0.0 or email or mobile.json]

Show info purse current user

### Get Info Purse [GET]

+ Request (application/json)

    + Headers
    Authorization: access_token

+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "UserNotFound",
            "error_message": "User Not Found."
          }
      }
+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "PurseNotFound",
            "error_message": "Purse Not Found."
          }
      }

+ Response 200 (application/json)

  + Body
      "meta": {
          "code": 200
      },
      "purse": 1,
      "public_id": 0,
      "name": "مصطفی امیری",
      "email_hash": "asdfghjklzxcvbnmoiuytrewas",
      "zp_id": "ZP.0.0"

## edit purse [/purse/edit/{purseNumber}.json]

Edit name purse

### Edit Purse [POST]

+ Request (application/json)

    + Headers
    Authorization: access_token

    +Body
      {
        "name" : "test2"
      }

+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "PurseNotFound",
            "error_message": "Purse Not Found."
          }
      }

+ Response 200 (application/json)

  + Body
      "meta": {
          "code": 200,
          "message": "Update name purse successfully."
      }
