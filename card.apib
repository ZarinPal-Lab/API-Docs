FORMAT: 1A
HOST: https://api.zarinpal.com/

# ZarinPal Rest API

The ZarinPal API is organized around REST. Our API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients.


# Group Cards

## card list [/card/list.json]

Show all user's card

### List All Cards [GET]

+ Request (application/json)

    + Headers
    Authorization : access_token

+ Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "CardNotFound",
          "error_message": "The selected card not found or you are not allowed to use it."
          }
      }

+ Response 200 (application/json)

  + Body
    {
      "data": [
            {
              "entity_id": "5767cba0211677b008",
              "account_id": 2455866200123,
              "iban": "IR140620000002101234567898",
              "pan": "636214******5863",
              "is_legal": false,
              "status": "Active",
              "issuer": {
               "name": "زرين کارت",
               "slug": "ZarinCard"
            },
            "expired_at": "2019-06-30 19:30:11"
            }
          ]
    }

    + Schema
      {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "entity_id": {
              "type": "string"
            },
            "account_id": {
              "type": "integer",
              "description": "account number"
            },
            "iban": {
              "type": "string"
            },
            "pan": {
              "type": "string"
            },
            "is_legal": {
              "type": "boolean",
              "description": "if is_legal set to ture this card is legal else it's real"
            },
            "issuer": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                }
              }
            },
            "expired_at": {
              "type": "string",
              "description": "expiration date for this card"
            }
          }
        }
      }


## card show [/card/show/{{card_entity_id}}.json]

Show one user's card

### Show One Card [GET]

+ Request (application/json)

    + Headers
    Authorization : access_token

+ Response 400 (application/json)

    + Body
      {
          "meta": {
          "code": 400,
          "error_type": "CardNotFound",
          "error_message": "The selected card not found or you are not allowed to use it."
          }
      }

+ Response 200 (application/json)

  + Body
     {
      "data": {
          "entity_id": "5767cba02128e8bf1677b008",
          "account_id": 2100455866200,
          "iban": "IR140620000002100455866200",
          "pan": "636214******5863",
          "is_legal": false,
          "status": "Active",
          "issuer": {
            "name": "زرين کارت",
            "slug": "ZarinCard"
          },
          "expired_at": "2019-06-30 19:30:00"
          },
          "meta": {
            "code": 200
          }
      }

      + Schema
        {
          "type": "object",
          "properties": {
            "entity_id": {
              "type": "string"
            },
            "account_id": {
              "type": "integer",
              "description": "account number"
            },
            "iban": {
              "type": "string"
            },
            "pan": {
              "type": "string"
            },
            "is_legal": {
              "type": "boolean",
              "description": "if is_legal set to ture this card is legal else it's real"
            },
            "status" : {
              "type" : "string"
            }
            "issuer": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                }
              }
            },
            "expired_at": {
              "type": "string",
              "description": "expiration date for this card"
            }
          }
      }

## card add [/card/add.json]

add user's card

### Add One Card [POST]

+ Request (application/json)

    + Headers
    Authorization : access_token
    + Body
        {
          "iban" : "IR150570028080012345531301",
          "pan" : "5022291012345190",
          "isLegal" : 1,
          "expired_at" : "1399-5"
        }

        + Schema
          {
            "type": "object",
            "properties": {
              "iban": {
                "type": "string"
              },
              "pan": {
                "type": "string"
              },
              "is_legal": {
                "type": "integer",
                "description": "if is_legal set to 1 this card is legal and if is_legal set to 0  it's real"
              },
              "expired_at": {
                "type": "string",
                "description": "expiration date for this card"
              }
            }
        }

+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardExists",
            "error_message": "The card already exists."
          }
      }
+ Response 400 (application/json)
    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardNotSupported",
            "error_message": "The card issuer is not supported."
          }
      }
+ Response 400 (application/json)
    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardExpired",
            "error_message": "The card is expired."
          }
      }

+ Response 200 (application/json)

  + body
    "meta": {
      "code": 200,
      "message": "Add card successfully."
      }

## card edit [/card/edit/{{card_entity_id}}.json]

edit user's card

### Edit One Card [POST]

+ Request (application/json)

    + Headers
    Authorization : access_token
    + Body
        {
          "pan" : "6362142100133635",
          "expired_at" : "1395-5"
        }

    + Schema
      {
        "type": "object",
        "properties": {
          "pan": {
            "type": "string"
          },
          "expired_at": {
            "type": "string",
            "description": "expiration date for this card"
          }
        }
    }

+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardCanNotEdit",
            "error_message": "You can not edit this card."
          }
      }
+ Response 400 (application/json)

    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardExists",
            "error_message": "The card already exists."
          }
      }
+ Response 400 (application/json)
    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardNotSupported",
            "error_message": "The card issuer is not supported."
          }
      }
+ Response 400 (application/json)
    + Body
      {
          "meta": {
            "code": 400,
            "error_type": "CardExpired",
            "error_message": "The card is expired."
          }
      }

+ Response 200 (application/json)

  + Body
    {
      "meta": {
        "code": 200,
        "message": "This card updated successfully."
        }
    }
